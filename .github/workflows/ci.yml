name: CI

on:
  push:
    tags: [ 'v*.*.*' ]
    branches: [ '**' ]
  pull_request_review:
    types:
      - submitted
  workflow_dispatch:
    inputs:
      golemversion:
        description: Golem version
        type: choice
        required: false
        default: 1.3.1
        options:
          - latest
          - master
          - 1.3.1

env:
  CARGO_TERM_COLOR: always
  GOLEM_VERSION: ${{ github.event.inputs.golemversion != '' && github.event.inputs.golemversion || '1.3.1' }}

# https://github.com/golemcloud/golem/releases/download/v1.3.1/golem-cli-x86_64-unknown-linux-gnu
# https://github.com/golemcloud/golem/releases/download/v1.3.1/golem-x86_64-unknown-linux-gnu

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust
        if: env.GOLEM_VERSION == 'master'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Install protobuf
        if: env.GOLEM_VERSION == 'master'
        uses: arduino/setup-protoc@v3
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Install golem-cli
        run: |
          if [[ "${{ env.GOLEM_VERSION }}" == "master" ]]
          then
            cargo install --git https://github.com/golemcloud/golem golem-cli --locked &&
            sudo mv ~/.cargo/bin/golem-cli /usr/local/bin &&
            echo "golem-cli built from source"
          elif [[ "${{ env.GOLEM_VERSION }}" == "latest" ]]
          then
            curl -Ssf -L -o golem-cli https://github.com/golemcloud/golem/releases/latest/download/golem-cli-x86_64-unknown-linux-gnu &&
            chmod +x golem-cli &&
            sudo mv golem-cli /usr/local/bin/ &&
            echo "golem-cli installed from latest git release"
          else
            curl -Ssf -L -o golem-cli https://github.com/golemcloud/golem/releases/download/v${{ env.GOLEM_VERSION }}/golem-cli-x86_64-unknown-linux-gnu &&
            chmod +x golem-cli &&
            sudo mv golem-cli /usr/local/bin/ &&
            echo "golem-cli v${{ env.GOLEM_VERSION }} installed from registry"
          fi
          if ! command -v golem-cli &> /dev/null; then exit 1; fi
      - name: Install golem
        run: |
          if [[ "${{ env.GOLEM_VERSION }}" == "master" ]]
          then
            cargo install --git https://github.com/golemcloud/golem golem --locked &&
            sudo mv ~/.cargo/bin/golem /usr/local/bin &&
            echo "golem built from source"
          elif [[ "${{ env.GOLEM_VERSION }}" == "latest" ]]
          then
            curl -Ssf -L -o golem https://github.com/golemcloud/golem/releases/latest/download/golem-x86_64-unknown-linux-gnu &&
            chmod +x golem &&
            sudo mv golem /usr/local/bin/ &&
            echo "golem installed from latest git release"
          else
            curl -Ssf -L -o golem https://github.com/golemcloud/golem/releases/download/v${{ env.GOLEM_VERSION }}/golem-x86_64-unknown-linux-gnu &&
            chmod +x golem &&
            sudo mv golem /usr/local/bin/ &&
            echo "golem installed from v${{ env.GOLEM_VERSION }} git release"
          fi
          if ! command -v golem &> /dev/null; then exit 1; fi
      - name: Print version
        run: |
          echo "Golem CLI version: $(golem-cli --version | cut -d ' ' -f 2)"
          echo "Golem version: $(golem --version | cut -d ' ' -f 2)"
      - uses: actions/upload-artifact@v4
        with:
          path: /usr/local/bin/golem*
          name: golem-tools

  build:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions/download-artifact@v5
        with:
          name: golem-tools
          path: /usr/local/bin
      - run: chmod u+x /usr/local/bin/golem*
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@v1.15.1
      - name: Install cargo-component
        run: cargo binstall --no-confirm cargo-component || true
      - name: Install protobuf
        uses: arduino/setup-protoc@v3
      - name: Compile
        run: golem-cli app build
      - name: Save components
        uses: actions/upload-artifact@v4
        with:
          path: golem-temp/agents/*.wasm
          name: components

  auto-merge:
    needs: build
    if: github.event.review.state == 'approved'
    runs-on: ubuntu-latest
    steps:
      - uses: TimonVS/pr-labeler-action@v5.0.0
        with:
          configuration-path: .github/auto_label.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: pascalgn/automerge-action@v0.16.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_LABELS: "automerge,!WIP,!do-not-merge"
          MERGE_METHOD: squash
